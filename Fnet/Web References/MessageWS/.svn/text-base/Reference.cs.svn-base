//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3615.
// 
#pragma warning disable 1591

namespace Fnet.MessageWS {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Message ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class MessageService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckUnreadMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAllMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteReplyCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMainCommentByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResponseCommentByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageByUserIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTopUnreadByUserIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnreadMessageCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateReadMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMessageOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MessageService() {
            this.Url = global::Fnet.Properties.Settings.Default.Fnet_MessageWS_Message_x0020_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckUnreadMessageCompletedEventHandler CheckUnreadMessageCompleted;
        
        /// <remarks/>
        public event CheckAllMessageCompletedEventHandler CheckAllMessageCompleted;
        
        /// <remarks/>
        public event InsertMessageCompletedEventHandler InsertMessageCompleted;
        
        /// <remarks/>
        public event InsertCommentCompletedEventHandler InsertCommentCompleted;
        
        /// <remarks/>
        public event deleteReplyCommentCompletedEventHandler deleteReplyCommentCompleted;
        
        /// <remarks/>
        public event deleteCommentCompletedEventHandler deleteCommentCompleted;
        
        /// <remarks/>
        public event GetMainCommentByIDCompletedEventHandler GetMainCommentByIDCompleted;
        
        /// <remarks/>
        public event GetResponseCommentByIDCompletedEventHandler GetResponseCommentByIDCompleted;
        
        /// <remarks/>
        public event GetMessageByUserIDCompletedEventHandler GetMessageByUserIDCompleted;
        
        /// <remarks/>
        public event GetTopUnreadByUserIDCompletedEventHandler GetTopUnreadByUserIDCompleted;
        
        /// <remarks/>
        public event GetUnreadMessageCountCompletedEventHandler GetUnreadMessageCountCompleted;
        
        /// <remarks/>
        public event UpdateReadMessageCompletedEventHandler UpdateReadMessageCompleted;
        
        /// <remarks/>
        public event DeleteMessageCompletedEventHandler DeleteMessageCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckUnreadMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable CheckUnreadMessage(int UserID) {
            object[] results = this.Invoke("CheckUnreadMessage", new object[] {
                        UserID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUnreadMessageAsync(int UserID) {
            this.CheckUnreadMessageAsync(UserID, null);
        }
        
        /// <remarks/>
        public void CheckUnreadMessageAsync(int UserID, object userState) {
            if ((this.CheckUnreadMessageOperationCompleted == null)) {
                this.CheckUnreadMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUnreadMessageOperationCompleted);
            }
            this.InvokeAsync("CheckUnreadMessage", new object[] {
                        UserID}, this.CheckUnreadMessageOperationCompleted, userState);
        }
        
        private void OnCheckUnreadMessageOperationCompleted(object arg) {
            if ((this.CheckUnreadMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUnreadMessageCompleted(this, new CheckUnreadMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckAllMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable CheckAllMessage(int UserID) {
            object[] results = this.Invoke("CheckAllMessage", new object[] {
                        UserID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAllMessageAsync(int UserID) {
            this.CheckAllMessageAsync(UserID, null);
        }
        
        /// <remarks/>
        public void CheckAllMessageAsync(int UserID, object userState) {
            if ((this.CheckAllMessageOperationCompleted == null)) {
                this.CheckAllMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAllMessageOperationCompleted);
            }
            this.InvokeAsync("CheckAllMessage", new object[] {
                        UserID}, this.CheckAllMessageOperationCompleted, userState);
        }
        
        private void OnCheckAllMessageOperationCompleted(object arg) {
            if ((this.CheckAllMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAllMessageCompleted(this, new CheckAllMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertMessage(int userID, int receiverID, string subject, string message) {
            object[] results = this.Invoke("InsertMessage", new object[] {
                        userID,
                        receiverID,
                        subject,
                        message});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertMessageAsync(int userID, int receiverID, string subject, string message) {
            this.InsertMessageAsync(userID, receiverID, subject, message, null);
        }
        
        /// <remarks/>
        public void InsertMessageAsync(int userID, int receiverID, string subject, string message, object userState) {
            if ((this.InsertMessageOperationCompleted == null)) {
                this.InsertMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMessageOperationCompleted);
            }
            this.InvokeAsync("InsertMessage", new object[] {
                        userID,
                        receiverID,
                        subject,
                        message}, this.InsertMessageOperationCompleted, userState);
        }
        
        private void OnInsertMessageOperationCompleted(object arg) {
            if ((this.InsertMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMessageCompleted(this, new InsertMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertComment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertComment(Comment comment) {
            this.Invoke("InsertComment", new object[] {
                        comment});
        }
        
        /// <remarks/>
        public void InsertCommentAsync(Comment comment) {
            this.InsertCommentAsync(comment, null);
        }
        
        /// <remarks/>
        public void InsertCommentAsync(Comment comment, object userState) {
            if ((this.InsertCommentOperationCompleted == null)) {
                this.InsertCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCommentOperationCompleted);
            }
            this.InvokeAsync("InsertComment", new object[] {
                        comment}, this.InsertCommentOperationCompleted, userState);
        }
        
        private void OnInsertCommentOperationCompleted(object arg) {
            if ((this.InsertCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCommentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteReplyComment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void deleteReplyComment(int comment_id) {
            this.Invoke("deleteReplyComment", new object[] {
                        comment_id});
        }
        
        /// <remarks/>
        public void deleteReplyCommentAsync(int comment_id) {
            this.deleteReplyCommentAsync(comment_id, null);
        }
        
        /// <remarks/>
        public void deleteReplyCommentAsync(int comment_id, object userState) {
            if ((this.deleteReplyCommentOperationCompleted == null)) {
                this.deleteReplyCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteReplyCommentOperationCompleted);
            }
            this.InvokeAsync("deleteReplyComment", new object[] {
                        comment_id}, this.deleteReplyCommentOperationCompleted, userState);
        }
        
        private void OndeleteReplyCommentOperationCompleted(object arg) {
            if ((this.deleteReplyCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteReplyCommentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteComment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void deleteComment(int comment_id) {
            this.Invoke("deleteComment", new object[] {
                        comment_id});
        }
        
        /// <remarks/>
        public void deleteCommentAsync(int comment_id) {
            this.deleteCommentAsync(comment_id, null);
        }
        
        /// <remarks/>
        public void deleteCommentAsync(int comment_id, object userState) {
            if ((this.deleteCommentOperationCompleted == null)) {
                this.deleteCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteCommentOperationCompleted);
            }
            this.InvokeAsync("deleteComment", new object[] {
                        comment_id}, this.deleteCommentOperationCompleted, userState);
        }
        
        private void OndeleteCommentOperationCompleted(object arg) {
            if ((this.deleteCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteCommentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMainCommentByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMainCommentByID(int userID) {
            object[] results = this.Invoke("GetMainCommentByID", new object[] {
                        userID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetMainCommentByIDAsync(int userID) {
            this.GetMainCommentByIDAsync(userID, null);
        }
        
        /// <remarks/>
        public void GetMainCommentByIDAsync(int userID, object userState) {
            if ((this.GetMainCommentByIDOperationCompleted == null)) {
                this.GetMainCommentByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMainCommentByIDOperationCompleted);
            }
            this.InvokeAsync("GetMainCommentByID", new object[] {
                        userID}, this.GetMainCommentByIDOperationCompleted, userState);
        }
        
        private void OnGetMainCommentByIDOperationCompleted(object arg) {
            if ((this.GetMainCommentByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMainCommentByIDCompleted(this, new GetMainCommentByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetResponseCommentByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetResponseCommentByID(int commentID) {
            object[] results = this.Invoke("GetResponseCommentByID", new object[] {
                        commentID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetResponseCommentByIDAsync(int commentID) {
            this.GetResponseCommentByIDAsync(commentID, null);
        }
        
        /// <remarks/>
        public void GetResponseCommentByIDAsync(int commentID, object userState) {
            if ((this.GetResponseCommentByIDOperationCompleted == null)) {
                this.GetResponseCommentByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResponseCommentByIDOperationCompleted);
            }
            this.InvokeAsync("GetResponseCommentByID", new object[] {
                        commentID}, this.GetResponseCommentByIDOperationCompleted, userState);
        }
        
        private void OnGetResponseCommentByIDOperationCompleted(object arg) {
            if ((this.GetResponseCommentByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResponseCommentByIDCompleted(this, new GetResponseCommentByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMessageByUserID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMessageByUserID(int userID) {
            object[] results = this.Invoke("GetMessageByUserID", new object[] {
                        userID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageByUserIDAsync(int userID) {
            this.GetMessageByUserIDAsync(userID, null);
        }
        
        /// <remarks/>
        public void GetMessageByUserIDAsync(int userID, object userState) {
            if ((this.GetMessageByUserIDOperationCompleted == null)) {
                this.GetMessageByUserIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageByUserIDOperationCompleted);
            }
            this.InvokeAsync("GetMessageByUserID", new object[] {
                        userID}, this.GetMessageByUserIDOperationCompleted, userState);
        }
        
        private void OnGetMessageByUserIDOperationCompleted(object arg) {
            if ((this.GetMessageByUserIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageByUserIDCompleted(this, new GetMessageByUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTopUnreadByUserID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetTopUnreadByUserID(int userID) {
            object[] results = this.Invoke("GetTopUnreadByUserID", new object[] {
                        userID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetTopUnreadByUserIDAsync(int userID) {
            this.GetTopUnreadByUserIDAsync(userID, null);
        }
        
        /// <remarks/>
        public void GetTopUnreadByUserIDAsync(int userID, object userState) {
            if ((this.GetTopUnreadByUserIDOperationCompleted == null)) {
                this.GetTopUnreadByUserIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTopUnreadByUserIDOperationCompleted);
            }
            this.InvokeAsync("GetTopUnreadByUserID", new object[] {
                        userID}, this.GetTopUnreadByUserIDOperationCompleted, userState);
        }
        
        private void OnGetTopUnreadByUserIDOperationCompleted(object arg) {
            if ((this.GetTopUnreadByUserIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTopUnreadByUserIDCompleted(this, new GetTopUnreadByUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUnreadMessageCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUnreadMessageCount(int userID) {
            object[] results = this.Invoke("GetUnreadMessageCount", new object[] {
                        userID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUnreadMessageCountAsync(int userID) {
            this.GetUnreadMessageCountAsync(userID, null);
        }
        
        /// <remarks/>
        public void GetUnreadMessageCountAsync(int userID, object userState) {
            if ((this.GetUnreadMessageCountOperationCompleted == null)) {
                this.GetUnreadMessageCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnreadMessageCountOperationCompleted);
            }
            this.InvokeAsync("GetUnreadMessageCount", new object[] {
                        userID}, this.GetUnreadMessageCountOperationCompleted, userState);
        }
        
        private void OnGetUnreadMessageCountOperationCompleted(object arg) {
            if ((this.GetUnreadMessageCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnreadMessageCountCompleted(this, new GetUnreadMessageCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateReadMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateReadMessage(int messageID) {
            this.Invoke("UpdateReadMessage", new object[] {
                        messageID});
        }
        
        /// <remarks/>
        public void UpdateReadMessageAsync(int messageID) {
            this.UpdateReadMessageAsync(messageID, null);
        }
        
        /// <remarks/>
        public void UpdateReadMessageAsync(int messageID, object userState) {
            if ((this.UpdateReadMessageOperationCompleted == null)) {
                this.UpdateReadMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateReadMessageOperationCompleted);
            }
            this.InvokeAsync("UpdateReadMessage", new object[] {
                        messageID}, this.UpdateReadMessageOperationCompleted, userState);
        }
        
        private void OnUpdateReadMessageOperationCompleted(object arg) {
            if ((this.UpdateReadMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateReadMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMessage(int messageID) {
            this.Invoke("DeleteMessage", new object[] {
                        messageID});
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(int messageID) {
            this.DeleteMessageAsync(messageID, null);
        }
        
        /// <remarks/>
        public void DeleteMessageAsync(int messageID, object userState) {
            if ((this.DeleteMessageOperationCompleted == null)) {
                this.DeleteMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteMessage", new object[] {
                        messageID}, this.DeleteMessageOperationCompleted, userState);
        }
        
        private void OnDeleteMessageOperationCompleted(object arg) {
            if ((this.DeleteMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Comment {
        
        private int commentIDField;
        
        private string contentField;
        
        private string dateField;
        
        private string create_dateField;
        
        private int replyIDField;
        
        private int userIDField;
        
        private int commetOnUserIDField;
        
        /// <remarks/>
        public int CommentID {
            get {
                return this.commentIDField;
            }
            set {
                this.commentIDField = value;
            }
        }
        
        /// <remarks/>
        public string Content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
            }
        }
        
        /// <remarks/>
        public string Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string Create_date {
            get {
                return this.create_dateField;
            }
            set {
                this.create_dateField = value;
            }
        }
        
        /// <remarks/>
        public int ReplyID {
            get {
                return this.replyIDField;
            }
            set {
                this.replyIDField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public int CommetOnUserID {
            get {
                return this.commetOnUserIDField;
            }
            set {
                this.commetOnUserIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CheckUnreadMessageCompletedEventHandler(object sender, CheckUnreadMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUnreadMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUnreadMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CheckAllMessageCompletedEventHandler(object sender, CheckAllMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAllMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAllMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void InsertMessageCompletedEventHandler(object sender, InsertMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void InsertCommentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void deleteReplyCommentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void deleteCommentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetMainCommentByIDCompletedEventHandler(object sender, GetMainCommentByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMainCommentByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMainCommentByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetResponseCommentByIDCompletedEventHandler(object sender, GetResponseCommentByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResponseCommentByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResponseCommentByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetMessageByUserIDCompletedEventHandler(object sender, GetMessageByUserIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageByUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageByUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTopUnreadByUserIDCompletedEventHandler(object sender, GetTopUnreadByUserIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTopUnreadByUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTopUnreadByUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetUnreadMessageCountCompletedEventHandler(object sender, GetUnreadMessageCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnreadMessageCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnreadMessageCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateReadMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591