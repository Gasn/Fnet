//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3082.
// 
#pragma warning disable 1591

namespace MessageService.DBOperation {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DBServicesSoap", Namespace="http://tempuri.org/")]
    public partial class DBServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InsertWithArrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertWithQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWithArrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWithQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteWithSingleValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteWithMultipleValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteWithQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultWithQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultParametersOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DBServices() {
            this.Url = global::MessageService.Properties.Settings.Default.MessageService_DBOperation_DBServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InsertWithArrayCompletedEventHandler InsertWithArrayCompleted;
        
        /// <remarks/>
        public event InsertWithQueryCompletedEventHandler InsertWithQueryCompleted;
        
        /// <remarks/>
        public event UpdateWithArrayCompletedEventHandler UpdateWithArrayCompleted;
        
        /// <remarks/>
        public event UpdateWithQueryCompletedEventHandler UpdateWithQueryCompleted;
        
        /// <remarks/>
        public event DeleteWithSingleValueCompletedEventHandler DeleteWithSingleValueCompleted;
        
        /// <remarks/>
        public event DeleteWithMultipleValuesCompletedEventHandler DeleteWithMultipleValuesCompleted;
        
        /// <remarks/>
        public event DeleteWithQueryCompletedEventHandler DeleteWithQueryCompleted;
        
        /// <remarks/>
        public event GetResultWithQueryCompletedEventHandler GetResultWithQueryCompleted;
        
        /// <remarks/>
        public event GetResultParametersCompletedEventHandler GetResultParametersCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertWithArray", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertWithArray(string table, string[] fields, string[] values) {
            this.Invoke("InsertWithArray", new object[] {
                        table,
                        fields,
                        values});
        }
        
        /// <remarks/>
        public void InsertWithArrayAsync(string table, string[] fields, string[] values) {
            this.InsertWithArrayAsync(table, fields, values, null);
        }
        
        /// <remarks/>
        public void InsertWithArrayAsync(string table, string[] fields, string[] values, object userState) {
            if ((this.InsertWithArrayOperationCompleted == null)) {
                this.InsertWithArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertWithArrayOperationCompleted);
            }
            this.InvokeAsync("InsertWithArray", new object[] {
                        table,
                        fields,
                        values}, this.InsertWithArrayOperationCompleted, userState);
        }
        
        private void OnInsertWithArrayOperationCompleted(object arg) {
            if ((this.InsertWithArrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertWithArrayCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertWithQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertWithQuery(string sql) {
            this.Invoke("InsertWithQuery", new object[] {
                        sql});
        }
        
        /// <remarks/>
        public void InsertWithQueryAsync(string sql) {
            this.InsertWithQueryAsync(sql, null);
        }
        
        /// <remarks/>
        public void InsertWithQueryAsync(string sql, object userState) {
            if ((this.InsertWithQueryOperationCompleted == null)) {
                this.InsertWithQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertWithQueryOperationCompleted);
            }
            this.InvokeAsync("InsertWithQuery", new object[] {
                        sql}, this.InsertWithQueryOperationCompleted, userState);
        }
        
        private void OnInsertWithQueryOperationCompleted(object arg) {
            if ((this.InsertWithQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertWithQueryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWithArray", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateWithArray(string table, string[] fields, string[] values, string wherefield, string whereequal) {
            object[] results = this.Invoke("UpdateWithArray", new object[] {
                        table,
                        fields,
                        values,
                        wherefield,
                        whereequal});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateWithArrayAsync(string table, string[] fields, string[] values, string wherefield, string whereequal) {
            this.UpdateWithArrayAsync(table, fields, values, wherefield, whereequal, null);
        }
        
        /// <remarks/>
        public void UpdateWithArrayAsync(string table, string[] fields, string[] values, string wherefield, string whereequal, object userState) {
            if ((this.UpdateWithArrayOperationCompleted == null)) {
                this.UpdateWithArrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWithArrayOperationCompleted);
            }
            this.InvokeAsync("UpdateWithArray", new object[] {
                        table,
                        fields,
                        values,
                        wherefield,
                        whereequal}, this.UpdateWithArrayOperationCompleted, userState);
        }
        
        private void OnUpdateWithArrayOperationCompleted(object arg) {
            if ((this.UpdateWithArrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWithArrayCompleted(this, new UpdateWithArrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWithQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateWithQuery(string sql) {
            object[] results = this.Invoke("UpdateWithQuery", new object[] {
                        sql});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateWithQueryAsync(string sql) {
            this.UpdateWithQueryAsync(sql, null);
        }
        
        /// <remarks/>
        public void UpdateWithQueryAsync(string sql, object userState) {
            if ((this.UpdateWithQueryOperationCompleted == null)) {
                this.UpdateWithQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWithQueryOperationCompleted);
            }
            this.InvokeAsync("UpdateWithQuery", new object[] {
                        sql}, this.UpdateWithQueryOperationCompleted, userState);
        }
        
        private void OnUpdateWithQueryOperationCompleted(object arg) {
            if ((this.UpdateWithQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWithQueryCompleted(this, new UpdateWithQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteWithSingleValue", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteWithSingleValue(string table, string wherefield, string whereequal) {
            this.Invoke("DeleteWithSingleValue", new object[] {
                        table,
                        wherefield,
                        whereequal});
        }
        
        /// <remarks/>
        public void DeleteWithSingleValueAsync(string table, string wherefield, string whereequal) {
            this.DeleteWithSingleValueAsync(table, wherefield, whereequal, null);
        }
        
        /// <remarks/>
        public void DeleteWithSingleValueAsync(string table, string wherefield, string whereequal, object userState) {
            if ((this.DeleteWithSingleValueOperationCompleted == null)) {
                this.DeleteWithSingleValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteWithSingleValueOperationCompleted);
            }
            this.InvokeAsync("DeleteWithSingleValue", new object[] {
                        table,
                        wherefield,
                        whereequal}, this.DeleteWithSingleValueOperationCompleted, userState);
        }
        
        private void OnDeleteWithSingleValueOperationCompleted(object arg) {
            if ((this.DeleteWithSingleValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteWithSingleValueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteWithMultipleValues", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteWithMultipleValues(string table, string wherestring, string[] parameters) {
            this.Invoke("DeleteWithMultipleValues", new object[] {
                        table,
                        wherestring,
                        parameters});
        }
        
        /// <remarks/>
        public void DeleteWithMultipleValuesAsync(string table, string wherestring, string[] parameters) {
            this.DeleteWithMultipleValuesAsync(table, wherestring, parameters, null);
        }
        
        /// <remarks/>
        public void DeleteWithMultipleValuesAsync(string table, string wherestring, string[] parameters, object userState) {
            if ((this.DeleteWithMultipleValuesOperationCompleted == null)) {
                this.DeleteWithMultipleValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteWithMultipleValuesOperationCompleted);
            }
            this.InvokeAsync("DeleteWithMultipleValues", new object[] {
                        table,
                        wherestring,
                        parameters}, this.DeleteWithMultipleValuesOperationCompleted, userState);
        }
        
        private void OnDeleteWithMultipleValuesOperationCompleted(object arg) {
            if ((this.DeleteWithMultipleValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteWithMultipleValuesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteWithQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteWithQuery(string sql) {
            this.Invoke("DeleteWithQuery", new object[] {
                        sql});
        }
        
        /// <remarks/>
        public void DeleteWithQueryAsync(string sql) {
            this.DeleteWithQueryAsync(sql, null);
        }
        
        /// <remarks/>
        public void DeleteWithQueryAsync(string sql, object userState) {
            if ((this.DeleteWithQueryOperationCompleted == null)) {
                this.DeleteWithQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteWithQueryOperationCompleted);
            }
            this.InvokeAsync("DeleteWithQuery", new object[] {
                        sql}, this.DeleteWithQueryOperationCompleted, userState);
        }
        
        private void OnDeleteWithQueryOperationCompleted(object arg) {
            if ((this.DeleteWithQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteWithQueryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetResultWithQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetResultWithQuery(string query) {
            object[] results = this.Invoke("GetResultWithQuery", new object[] {
                        query});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultWithQueryAsync(string query) {
            this.GetResultWithQueryAsync(query, null);
        }
        
        /// <remarks/>
        public void GetResultWithQueryAsync(string query, object userState) {
            if ((this.GetResultWithQueryOperationCompleted == null)) {
                this.GetResultWithQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultWithQueryOperationCompleted);
            }
            this.InvokeAsync("GetResultWithQuery", new object[] {
                        query}, this.GetResultWithQueryOperationCompleted, userState);
        }
        
        private void OnGetResultWithQueryOperationCompleted(object arg) {
            if ((this.GetResultWithQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultWithQueryCompleted(this, new GetResultWithQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetResultParameters", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetResultParameters(string table, string[] fields, string[] parameters) {
            object[] results = this.Invoke("GetResultParameters", new object[] {
                        table,
                        fields,
                        parameters});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultParametersAsync(string table, string[] fields, string[] parameters) {
            this.GetResultParametersAsync(table, fields, parameters, null);
        }
        
        /// <remarks/>
        public void GetResultParametersAsync(string table, string[] fields, string[] parameters, object userState) {
            if ((this.GetResultParametersOperationCompleted == null)) {
                this.GetResultParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultParametersOperationCompleted);
            }
            this.InvokeAsync("GetResultParameters", new object[] {
                        table,
                        fields,
                        parameters}, this.GetResultParametersOperationCompleted, userState);
        }
        
        private void OnGetResultParametersOperationCompleted(object arg) {
            if ((this.GetResultParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultParametersCompleted(this, new GetResultParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void InsertWithArrayCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void InsertWithQueryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateWithArrayCompletedEventHandler(object sender, UpdateWithArrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateWithArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateWithArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateWithQueryCompletedEventHandler(object sender, UpdateWithQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateWithQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateWithQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteWithSingleValueCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteWithMultipleValuesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteWithQueryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetResultWithQueryCompletedEventHandler(object sender, GetResultWithQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultWithQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultWithQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetResultParametersCompletedEventHandler(object sender, GetResultParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591